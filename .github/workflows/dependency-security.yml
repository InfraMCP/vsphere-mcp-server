name: Dependency Security Check

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - 'docs/**'
  schedule:
    # Run weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[security]"
    
    - name: Generate dependency report
      run: |
        python scripts/generate_dependency_report.py
    
    - name: Run safety scan
      run: |
        safety scan --output json > safety-report.json 2>&1 || echo '{"vulnerabilities": []}' > safety-report.json
        
    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=audit-report.json || echo '[]' > audit-report.json
    
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          docs/dependency-report.json
          docs/DEPENDENCIES.md
          safety-report.json
          audit-report.json
    
    - name: Comment on PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          let comment = '## 🔒 Dependency Security Report\n\n';
          
          // Check if safety report exists and has vulnerabilities
          try {
            const safetyData = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            
            // Handle both old format (array) and new scan format (object with vulnerabilities)
            let vulnerabilities = [];
            if (Array.isArray(safetyData)) {
              vulnerabilities = safetyData; // Old format
            } else if (safetyData.vulnerabilities) {
              vulnerabilities = safetyData.vulnerabilities; // New scan format
            }
            
            if (vulnerabilities.length > 0) {
              comment += `⚠️ **${vulnerabilities.length} security vulnerabilities found by Safety:**\n`;
              vulnerabilities.slice(0, 5).forEach(vuln => {
                const pkgName = vuln.package_name || vuln.package || 'Unknown package';
                const version = vuln.installed_version || vuln.version || 'Unknown version';
                const advisory = vuln.advisory || vuln.title || vuln.summary || 'Security vulnerability';
                comment += `- **${pkgName}** v${version}: ${advisory}\n`;
              });
              if (vulnerabilities.length > 5) {
                comment += `- ... and ${vulnerabilities.length - 5} more vulnerabilities\n`;
              }
            } else {
              comment += '✅ **No known vulnerabilities found by Safety**\n';
            }
          } catch (e) {
            comment += '❓ **Safety scan results unavailable** (network issue or scan failed)\n';
            console.log('Safety report error:', e.message);
          }
          
          // Check pip-audit results
          try {
            const auditData = JSON.parse(fs.readFileSync('audit-report.json', 'utf8'));
            if (auditData.length > 0) {
              comment += `\n⚠️ **${auditData.length} vulnerabilities found by pip-audit:**\n`;
              auditData.slice(0, 3).forEach(vuln => {
                comment += `- **${vuln.package}** v${vuln.version}: ${vuln.id}\n`;
              });
              if (auditData.length > 3) {
                comment += `- ... and ${auditData.length - 3} more\n`;
              }
            } else {
              comment += '\n✅ **No vulnerabilities found by pip-audit**\n';
            }
          } catch (e) {
            comment += '\n❓ **pip-audit results unavailable**\n';
          }
          
          comment += '\n📋 Full dependency report available in workflow artifacts.\n';
          comment += '\n💡 **Security Recommendations:**\n';
          comment += '- Review all dependency changes carefully\n';
          comment += '- Update vulnerable packages immediately\n';
          comment += '- Monitor security advisories for listed dependencies\n';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
